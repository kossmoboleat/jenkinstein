<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1477207927997">{:repl-history {:ide [], :local [&quot;(palindrome? [1 2 1]) &quot; &quot;(palindrome? [1 2 1])&quot; &quot;(1 [1 2])&quot; &quot;([1 2] 2)&quot; &quot;([1 2] 0)\n  &quot; &quot;((1 2) 0)\n  &quot; &quot;('(1 2) 0)\n  &quot; &quot;({:a 1} :a)&quot; &quot;(ns jenkinstein.ant)&quot; &quot;(print-field (make-field 3))&quot; &quot;(print-field (make-field 5))&quot; &quot;([1 2] 1)&quot; &quot;(([[1 2] [3 4]] 1) 1) &quot; &quot;(when true \&quot;Hello\&quot;)&quot; &quot;(defmacro unless [arg &amp; body]\n  `(if (not ~arg)\n     (do ~@body)))\n\n(unless false \&quot;Hello\&quot;)&quot; &quot;(unless true \&quot;Hello\&quot;)&quot; &quot;(when false \&quot;Hello\&quot;)&quot; &quot;(.getClass \\c)&quot; &quot;(+ 1 1)\n\n(defn hello [name]\n  (str \&quot;Hello \&quot; name))\n\n(defn odd-numbers [max]\n  (filter odd? (range max)))\n\n(def keymap {:a 1, :b 2, :c 3})\n\n(keymap :a)&quot; &quot;(odd-numbers 10)\n             &quot; &quot;(defn hello [name]\n  (str \&quot;Hello \&quot; name))&quot; &quot;(.getClass hello)&quot; &quot;(defn odd-numbers [max]\n  (filter odd? (range max)))&quot; &quot;(def keymap {:a 1, :b 2, :c 3})&quot; &quot;(keymap :a)&quot; &quot;(hello \&quot;Tim\&quot;)&quot; &quot;(odd-numbers 10)&quot; &quot;(talk \&quot;Clojure is good\&quot;)&quot; &quot;(talk \&quot;Clojure is great\&quot;)&quot; &quot;(+ 1 1)&quot; &quot;(.getClass \&quot;Hello\&quot;)&quot; &quot;(reverse \&quot;anna\&quot;)&quot; &quot;(= \&quot;abc\&quot; (reverse \&quot;abc\&quot;))&quot; &quot;(= \&quot;anna\&quot; (reverse \&quot;anna\&quot;))&quot; &quot;(reverse \&quot;abc\&quot;)&quot; &quot;(= (seq \&quot;anna\&quot;) (reverse \&quot;anna\&quot;))&quot; &quot;(defn is-palindrome [value]\n  (= (seq value) (reverse value)))&quot; &quot;(is-palindrome \&quot;anna\&quot;)&quot; &quot;(is-palindrome \&quot;abc\&quot;)&quot; &quot;(is-palindrome \&quot;racecar\&quot;)&quot; &quot;'(1 2 3)&quot; &quot;'(\&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(def l '(\&quot;a\&quot; \&quot;b\&quot;))&quot; &quot;l&quot; &quot;(conj l \&quot;c\&quot;)&quot; &quot;(\&quot;c\&quot; \&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;'(\&quot;c\&quot; \&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(def person {:first \&quot;Peter\&quot; :second \&quot;Lustig\&quot;})&quot; &quot;(person)&quot; &quot;'(person)&quot; &quot;person&quot; &quot;(person :first)&quot; &quot;{\&quot;first\&quot; \&quot;Peter\&quot;}&quot; &quot;{\&quot;nase\&quot; \&quot;schief\&quot;}&quot; &quot;{:arm \&quot;schief\&quot; \&quot;nase\&quot; \&quot;gerade\&quot;}&quot; &quot;{:arm {:laenge 1 :fingerfarbe \&quot;gelb\&quot;}}&quot; &quot;'(1 2)&quot; &quot;(1 2)&quot; &quot;[1 2 3]&quot; &quot;(defn + [a b]\n  (str a b))&quot; &quot;(+ \&quot;b\&quot; \&quot;c\&quot;)&quot; &quot;(def m (new LocalMaryInterface))&quot; &quot;(.getVoic m)&quot; &quot;(.getLocale m)&quot; &quot;(def britishLocale (new Locale.Builder().setLanguage(\&quot;en\&quot;).setRegion(\&quot;GB\&quot;).build()))&quot; &quot;(def britishLocale (new java.util.Locale.Builder().setLanguage(\&quot;en\&quot;).setRegion(\&quot;GB\&quot;).build()))&quot; &quot;(def britishLocale (new java.util.Locale.Builder()))&quot; &quot;(def britishLocale (new Builder()))&quot; &quot;(import java.util.Locale Builder)&quot; &quot;(import jLocale Builder)&quot; &quot;(def britishLocale (new Locale.Builder()))&quot; &quot;(def britishLocale (new Locale(\&quot;en\&quot; \&quot;GB\&quot;)))&quot; &quot;(def britishLocale new Locale(\&quot;en\&quot; \&quot;GB\&quot;))&quot; &quot;(def britishLocale (new Locale()))&quot; &quot;(def britishLocale (Locale. \&quot;en\&quot; \&quot;GB\&quot;))&quot; &quot;(.setLocale britishLocale)&quot; &quot;(.setLocale m britishLocale)&quot; &quot;(.getVoice)&quot; &quot;(.getVoice m)&quot; &quot;(def clip (AudioSystem/getClip))&quot; &quot;(.open clip (.generateAudio mary \&quot;test 123\&quot;))&quot; &quot;(.open clip (.generateAudio m \&quot;test 123\&quot;))&quot; &quot;(.start clip)&quot; &quot;(create-sound! \&quot;1\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;1\&quot;)&quot; &quot;(conman/bind-connection *db* \&quot;sql/queries.sql\&quot;)&quot; &quot;(ns jenkinstein.db.core)&quot; &quot;(register-sound {:params {}})&quot; &quot;(register-sound {:params {:url \&quot;123\&quot;}})&quot; &quot;(handle-failure \&quot;test\&quot; nil)&quot; &quot;(empty? [])&quot; &quot;(not-empty [])&quot; &quot;(handle-failure \&quot;test\&quot; [])&quot; &quot;(start)&quot; &quot;(ns jenkinstein.business.talk)&quot; &quot;(talk \&quot;test\&quot;)&quot; &quot;(ns jenkinstein.notify.notify)&quot; &quot;(is-higher :success :unstable)&quot; &quot;(is-higher :unstable :unstable)&quot; &quot;(&gt;=-threshold :unstable :failure)&quot; &quot;(&gt;=-threshold :unstable :unstable)&quot; &quot;(&gt;=-threshold :unstable :success)&quot;], :remote [&quot;(ns 'jenkinstein.business.files)&quot; &quot;(ns jenkinstein.business.files)&quot; &quot;(def curr-dir (io/file \&quot;resources/sounds/\&quot;))&quot; &quot;(file-seq curr-dir)&quot; &quot;(take 1 (file-seq curr-dir))&quot; &quot;(.getName (take 1 (file-seq curr-dir)))&quot; &quot;(.getName \&quot;123\&quot;)&quot; &quot;(.toString \&quot;123\&quot;)&quot; &quot;(.equals \&quot;123\&quot; \&quot;123\&quot;)&quot; &quot;(.equals \&quot;123\&quot; \&quot;13\&quot;)&quot; &quot;\&quot;123\&quot;&quot; &quot;curr-dir&quot; &quot;(.getName (take 1 (take 1 (file-seq curr-dir))))&quot; &quot;(take 1 (take 1 (file-seq curr-dir)))\n      &quot; &quot;(first (take 1 (file-seq curr-dir)))\n      &quot; &quot;(.getName (first (take 1 (file-seq curr-dir))))\n      &quot; &quot;(file-seq curr-dir)\n          \n      &quot; &quot;(list-files)&quot; &quot;(play \&quot;medieval.aiff\&quot;)&quot; &quot;(in-ns jenkinstein.business.speech)&quot; &quot;(in-ns 'jenkinstein.business.speech)&quot; &quot;(speak \&quot;test\&quot;)&quot; &quot;(speak \&quot;Hallo Maewen\&quot;)&quot; &quot;(speak \&quot;Build Mainline failed\&quot;)&quot; &quot;(speak \&quot;Build Mainline ... failed\&quot;)&quot; &quot;(speak \&quot;Failure in ... Mainline\&quot;)&quot; &quot;(let [manager (VoiceManager/getInstance)\n      voice (.getVoice manager \&quot;kevin\&quot;)\n      def v voice])\n&quot; &quot;(let [manager (VoiceManager/getInstance)\n      voice (.getVoice manager \&quot;kevin\&quot;)]\n     def v voice)\n&quot; &quot;(let [manager (VoiceManager/getInstance)\n      voice (.getVoice manager \&quot;kevin\&quot;)]\n     (def v voice))\n&quot; &quot;v&quot; &quot;(.allocate v)&quot; &quot;(.getPitch v)&quot; &quot;(.getRate v)&quot; &quot;(.setRate v 50)&quot; &quot;(.setRate v 100)&quot; &quot;(.speak v \&quot;test\&quot;)&quot; &quot;(.speak v \&quot;Mainline Build ... failed\&quot;)&quot; &quot;(.speak v \&quot;Mainline Build .. failed\&quot;)&quot; &quot;(.speak v \&quot;Tile \\\&quot;build mainline\\\&quot; .. failed\&quot;)&quot; &quot;(.speak v \&quot;Tile .. \\\&quot;build mainline\\\&quot; .. failed\&quot;)&quot; &quot;(.speak v \&quot;Tile .. \\\&quot;build mainline\\\&quot; .. Failue\&quot;)&quot; &quot;(.speak v \&quot;Tile .. \\\&quot;build mainline\\\&quot; .. Failure\&quot;)&quot; &quot;(.setRate v 120)&quot; &quot;(.setRate v 90)&quot; &quot;(.speak v \&quot;Tile .. \\\&quot;build mainline\\\&quot; .. Fail\&quot;)&quot; &quot;(in-ns 'jenkinstein.business.playback)&quot; &quot;(play \&quot;medieval.mp3\&quot;)&quot; &quot;(play \&quot;medieval.wav\&quot;)&quot; &quot;(in-ns 'jenkinstein.business.talk)&quot; &quot;(def x mary (new LocalMaryInterface))&quot; &quot;(def mary (new LocalMaryInterface))&quot; &quot;(.getAvailableVoices mary)&quot; &quot;(.getAvailableLocales mary)&quot; &quot;(.setLocale mary \&quot;en_GB\&quot;)&quot; &quot;(.setLocale mary Locale.BRITISH)&quot; &quot;(.setLocale mary java.util.Locale.ENGLISH)&quot; &quot;(:import java.util Locale)&quot; &quot;(.setLocale mary java.util.Locale.US)&quot; &quot;(import java.util Locale)&quot; &quot;(import java.util Date)&quot; &quot;(.setLocale mary Locale.US)&quot; &quot;(in-ns jenkinstein.business.talk)&quot;]}}</component>
</project>